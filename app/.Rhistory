AllSprWMig<-data.frame(AllWSMig$F_ID, AllWSMig$Lat, AllWSMig$Lon ,  AllWSMig$Wing.results)
colnames(AllSprWMig) <-c("sample_ID","lat","long", "sample_value")
AllAutFMig<-data.frame(AllFAMig$F_ID, AllFAMig$lat, AllFAMig$long, AllFAMig$sample_value)
colnames(AllAutFMig) <- c("sample_ID","lat","long", "sample_value")
AllAutWMig<-data.frame(AllWAMig$F_ID, AllWAMig$Lat, AllWAMig$Lon,  AllWAMig$Wing.results)
colnames(AllAutWMig) <-c("sample_ID","lat","long", "sample_value")
######
FindAllFSMig <- isofind(data = AllSprFMig,
isoscape = EuropeIsoscape,
calibfit = CalibrF)
FindAllWSMig <- isofind(data = AllSprWMig,
isoscape = EuropeIsoscape,
calibfit = CalibrW)
FindAllFAMig <- isofind(data = AllAutFMig,
isoscape = EuropeIsoscape,
calibfit = CalibrF)
FindAllWAMig <- isofind(data = AllAutWMig,
isoscape = EuropeIsoscape,
calibfit = CalibrW)
AllWSMigC<-data.frame(AllWSMig$F_ID )
colnames(AllWSMigC) <-c("F_ID")
AllFSMigC<-data.frame(AllFSMig$F_ID)
colnames(AllFSMigC) <-c("F_ID")
AllSprMig<-rbind(AllWSMigC,AllFSMigC)%>%
distinct()###extracting all individuals classified as not originating from their sample site
AllWAMigC<-data.frame(AllWAMig$F_ID )
colnames(AllWAMigC) <-c("F_ID")
AllFAMigC<-data.frame(AllFAMig$F_ID )
colnames(AllFAMigC) <-c("F_ID")
AllAutMig<-rbind(AllWAMigC,AllFAMigC)%>%
distinct()
Sprplot<-match_df(AllSprF,AllSprMig)
library(raster)
library(maps)
library(maptools)
library(viridis)
library(mapdata)
library(ggplot2)
library(ggplot2)
library(rgdal)
samps<-read.csv("Data/Listofsites.csv")
samps<-distinct(samps)
#add total number of migrants for spring and autumn
samps$Spring<-c(0,0,1,1,0,0,2,3,8,0,0,0,0,0,9,11,4,2, 1,12)
samps$Autumn<-c(5,3,2,1,0,0,1,1,7,0,0,1,3,2,1,0,0,0 ,2,14)
wmap <- readOGR(dsn="Data/ne_50m_land.shp", layer="ne_50m_land")
countries <- readOGR("Data/ne_50m_admin_0_countries.shp", layer="ne_50m_admin_0_countries")
range <- readOGR("Data/species_13561.shp", layer="species_13561")
#reproject to european projection
wmap_laea<- spTransform(wmap, CRS("+proj=laea"))  #each projection will have it's own code which you can enter in after"+proj=XXXX"
countries_laea<-spTransform(countries, CRS("+proj=laea"))
range_laea<-spTransform(range, CRS("+proj=laea"))
coordinates(samps)<-c("Lon","Lat")
proj4string(samps) <- CRS("+proj=longlat")
loc_laea<-spTransform(samps, CRS("+proj=laea"))
#orginal data
wmap_df<-fortify(wmap)
countries_df<-fortify(countries)
range_df<-fortify(range)
loc_df<-data.frame(samps)
#loc_df<-distinct(loc_df)
#add total number of migrants for spring and autumn
#loc_df$Spring<-c(0,0,1,1,0,0,2,3,8,0,0,0,0,0,9,11,4,2, 1,12)
#loc_df$Autumn<-c(5,3,2,1,0,0,1,1,7,0,0,1,3,2,1,0,0,0 ,2,14)
#reprojected data
wmap_laea_df<-fortify(wmap_laea)
countries_laea_df<-fortify(countries_laea)
range_laea_df<-fortify(range_laea)
loc_laea_df<-data.frame(loc_laea)
loc_laea_df<-data.frame(loc_laea)
#loc_laea<-spTransform(loc_df, CRS("+proj=laea"))
########GGplot theme
theme_opts<-list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = 'light blue', colour = NA),
plot.background = element_rect(fill="light grey",
size=1,linetype="solid",color="black"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size=22)))
theme_opts<-list(theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill = 'light blue', colour = NA),
#plot.background = element_rect(fill="light grey",
#                              size=1,linetype="solid",color="black"),
plot.title = element_text(size=22)))
#plot(theme_opts)
xmin<-min(loc_laea_df$Lon)
xmax<-max(loc_laea_df$Lon)
ymin<-min(loc_laea_df$Lat)
ymax<-max(loc_laea_df$Lat)
buff<-800000   #buffer around points so they all fit in but aren't squashed in, here in metres
CPCOLS <- c("#DBDBDB", "#33a02c", "#e31a1c")
ggplot() +
geom_polygon(data=wmap_laea_df, aes(long,lat,group=group), fill="gray60")+
geom_polygon(data = range_laea_df, aes(long, lat, group=group), fill="darkgreen",alpha=I(6/10))+
geom_path(data=countries_laea_df, aes(long,lat, group=group), color="light grey",
size=0.1) +
geom_point(data=loc_laea_df, aes(Lon, Lat),
color="black", size=2) +
scale_size(range=c(1,7), guide = "legend",labs(size="Count")) +
coord_cartesian(xlim = c((xmin-buff),(xmax+buff)), ylim = c((ymin-buff),(ymax+buff))) +
xlab("Longitude")+ylab("Latitude")+
#coord_cartesian(xlim = c(-13, 40), ylim = c(33, 55))+
#theme(aspect.ratio=1)+
theme_opts
Alldat %>%
group_by(Season, Site) %>%
summarise(n = n())
loc_laea_df<-loc_laea_df[order(loc_laea_df$Site),]
loc_laea_df$SprN<-c(7,10,15,6,6,6,14,12,0,12,8,8,17,12,0,5,5,8,0,11)#total number of bats
loc_laea_df$AutN<-c(8,15,7,4,6,6,2,10,0,14,8,10,15,15,12,2,2,8,12,11)#total number of bats
loc_laea_df$nonMAut<-loc_laea_df$AutN-loc_laea_df$Autumn#Non migratory bats
loc_laea_df$nonMSpr<-loc_laea_df$SprN-loc_laea_df$Spring#Non migratory bats
# Center: reorder your dataset first! Big cities appear later = on top
library(cowplot)
library(ggrepel)
Spring<-
ggplot() +
geom_polygon(data=wmap_laea_df, aes(long,lat,group=group), fill="gray75")+
geom_polygon(data = range_laea_df, aes(long, lat, group=group), fill="darkgreen",alpha=I(6/10))+
geom_path(data=countries_laea_df, aes(long,lat, group=group), color="light grey",
size=0.1) +
geom_point(data=loc_laea_df, aes(x=Lon, y=Lat, size=Spring), color="gray30") +
scale_size(range=c(1,7),breaks=c(0,3,6,10,14)) +
geom_text_repel(data=loc_laea_df, aes(x=Lon, y=Lat,label = SprN,group = SprN),
color = 'black',segment.size  = 0.2,
size  = 4)+
coord_cartesian(xlim = c((xmin-buff),(xmax+buff)), ylim = c((ymin-buff),(ymax+buff))) +
xlab("Longitude")+ylab("Latitude")+
#coord_cartesian(xlim = c(-13, 40), ylim = c(33, 55))+
#theme(aspect.ratio=1)+
#theme_opts#+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1))
#plot(Spring)
Autumn<-
ggplot() +
geom_polygon(data=wmap_laea_df, aes(long,lat,group=group), fill="gray75")+
geom_polygon(data = range_laea_df, aes(long, lat, group=group), fill="darkgreen",alpha=I(6/10))+
geom_path(data=countries_laea_df, aes(long,lat, group=group), color="light grey",
size=0.1) +
geom_point(data=loc_laea_df, aes(x=Lon, y=Lat, size=Autumn), color="gray30") +
scale_size(range=c(1,7),breaks=c(0,3,6,10,14)) +
geom_text_repel(data=loc_laea_df, aes(x=Lon, y=Lat,label = AutN,group = AutN),
color = 'black',segment.size  = 0.2,
size  = 4)+
coord_cartesian(xlim = c((xmin-buff),(xmax+buff)), ylim = c((ymin-buff),(ymax+buff))) +
xlab("Longitude")+ylab("Latitude")+
#coord_cartesian(xlim = c(-13, 40), ylim = c(33, 55))+
#theme(aspect.ratio=1)+
#theme_opts#+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1))
#grid.arrange(Spring, Autumn, ncol=2)
# arrange the three plots in a single row
prow <- plot_grid(
Spring + theme(legend.position="none"),
Autumn + theme(legend.position="none"),
align = 'vh',
labels = c("Spring", "Autumn"),
hjust = -1.4,vjust =8,
nrow = 1,
axis="b"
)
prow
# extract the legend from one of the plots
legend_b <- get_legend(
Autumn +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
# add the legend underneath the row we made earlier. Give it 10%
# of the height of one plot (via rel_heights).
plot_grid(prow, legend_b, ncol = 1, rel_heights = c(1, .1))
library(scatterpie)
Autumn<-
ggplot() +
geom_polygon(data=wmap_laea_df, aes(long,lat,group=group), fill="gray75")+
geom_polygon(data = range_laea_df, aes(long, lat, group=group), fill="darkgreen",alpha=I(6/10))+
geom_path(data=countries_laea_df, aes(long,lat, group=group), color="light grey",size=0.1) +
#geom_point(data=loc_laea_df, aes(x=Lon, y=Lat, size=Autumn), color="gray30") +
#scale_size(range=c(1,7),breaks=c(0,3,6,10,14)) +
#geom_text_repel(data=loc_laea_df, aes(x=Lon, y=Lat,label = AutN,group = AutN),  color = 'black',segment.size  = 0.2, size  = 4)+
coord_cartesian(xlim = c((xmin-buff),(xmax+buff)), ylim = c((ymin-buff),(ymax+buff))) +
xlab("Longitude")+ylab("Latitude")+
#coord_cartesian(xlim = c(-13, 40), ylim = c(33, 55))+
#theme(aspect.ratio=1)+
#theme_opts#+
geom_scatterpie(aes(x=Lon, y=Lat, group = Site, r=AutN*6000),
data = loc_laea_df, cols = c("Autumn", "nonMAut"))+
scale_fill_discrete(name = "Autumn", labels = c( "Non-local","Local"))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1),
legend.position = c(0.87, 0.85))
#plot(Autumn)
#loc_laea_df<-dplyr::rename(loc_laea_df,ZnonMSpr = nonMSpr )#change name of variable for order
Spring<-
ggplot() +
geom_polygon(data=wmap_laea_df, aes(long,lat,group=group), fill="gray75")+
geom_polygon(data = range_laea_df, aes(long, lat, group=group), fill="darkgreen",alpha=I(6/10))+
geom_path(data=countries_laea_df, aes(long,lat, group=group), color="light grey",size=0.1) +
#geom_point(data=loc_laea_df, aes(x=Lon, y=Lat, size=Autumn), color="gray30") +
#scale_size(range=c(1,7),breaks=c(0,3,6,10,14)) +
#geom_text_repel(data=loc_laea_df, aes(x=Lon, y=Lat,label = AutN,group = AutN),  color = 'black',segment.size  = 0.2, size  = 4)+
coord_cartesian(xlim = c((xmin-buff),(xmax+buff)), ylim = c((ymin-buff),(ymax+buff))) +
xlab("Longitude")+ylab("Latitude")+
#coord_cartesian(xlim = c(-13, 40), ylim = c(33, 55))+
#theme(aspect.ratio=1)+
#theme_opts#+
geom_scatterpie(aes(x=Lon, y=Lat, group = Site, r=SprN*6000),
data = loc_laea_df, cols = c("Spring", "ZnonMSpr" ))+
scale_fill_discrete(name = "Spring", labels = c( "Non-local","Local"))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=1),
legend.position = c(0.87, 0.85))
sample_ID<-c("Ind102 Fur", "Ind102 Wing")
lat<-c(39.83198,39.83198)
long<-c(-8.410420,-8.410420)
sample_value<-c(-15.86,-27.64)
FigureEx<-data.frame(sample_ID,lat,long,sample_value)
FigureEx_Find <- isofind(data = FigureEx,
isoscape = EuropeIsoscape,
calibfit = CalibrW)
Indplot<-
plot(FigureEx_Find, who=1:2,
sources=list(draw=FALSE),
calibs=list(draw=FALSE),
assigns=list(draw=TRUE,col="red",pch = 17,cex = 1))
#AllSerbWin<-AllAutF%>%
# filter(Site=="Petni?ka pe?ina")%>%
#  select(F_ID, Lat,Lon, Wing.results )%>%
#rename(F_ID=sample_ID, Lat=lat, Lon=long, Wing.results=sample_value)%>%
# subset(Wing.results != "ALV106")#%>%
#colnames(sample_ID=F_ID, lat = Lat, long=Lon, sample_value=Wing.results)
AllSerbFur<-AllAutF%>%
filter(ID=="Petni?ka pe?ina")%>%
select(F_ID,lat,long, sample_value )%>%
subset( sample_ID != "B04707")#%>%
#  subset( sample_ID != "ALV103")#%>%
#rename(sample_ID=F_ID)
#colnames(AllAlvWin)<-c("sample_ID", "lat", "long", "sample_value")
colnames(AllSerbFur)<-c("sample_ID", "lat", "long", "sample_value")
#Alv_FindWin <- isofind(data = AllAlvWin,
#                      isoscape = EuropeIsoscape,
#                      calibfit = CalibrW)
AllSerbFurFind <- isofind(data = AllSerbFur,
isoscape = EuropeIsoscape,
calibfit = CalibrF)
AllSerbFurplot<-plot(AllSerbFurFind, who="group",
sources=list(draw=FALSE),
calibs=list(draw=FALSE),
assigns=list(draw=TRUE,col="red",pch = 17,cex = 1))
###########
sample_ID<-c("Ind4707")
lat<-c(44.24517)
long<-c(19.935535)
sample_value<-c(-48.12000)
Bo4707<-data.frame(sample_ID,lat,long,sample_value)
Bo4707FurFind <- isofind(data = Bo4707,
isoscape = EuropeIsoscape,
calibfit = CalibrF)
Bo4707SerbFurplot<-plot(Bo4707FurFind, who=1,
sources=list(draw=FALSE),
calibs=list(draw=FALSE),
assigns=list(draw=TRUE,col="red",pch = 17,cex = 1))
SerbComb<-grid.arrange(AllSerbFurplot, Bo4707SerbFurplot, ncol=2)
Assignment_Prob_group <- AllSerbFurFind$group$pv
projection(Assignment_Prob_group)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_group,
filename = "ap1.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_ind <- Bo4707FurFind$sample$pv[['Bo4707']] #$group$pv
Assignment_Prob_ind <- Bo4707FurFind$sample$pv[['Ind4707']] #$group$pv
projection(Assignment_Prob_ind)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_ind,
filename = "ap2.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_Fur <- Indplot$sample$pv[['Ind102 Fur']] #$group$pv
projection(Assignment_Prob_Fur)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_ind,
filename = "Ind102 Fur.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_Wing <- Indplot$sample$pv[['Ind102 Wing']] #$group$pv
projection(Assignment_Prob_Wing)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_Wing,
filename = "Ind102 Wing.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_group <- AllSerbFurFind$group$pv
projection(Assignment_Prob_group)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_group,
filename = "ap1.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_group <- AllSerbFurFind$group$pv
projection(Assignment_Prob_group)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_group,
filename = "ap2.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_Fur <- Indplot$sample$pv[['Ind102 Fur']] #$group$pv
projection(Assignment_Prob_Fur)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_ind,
filename = "Ind102 Fur.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_group <- AllSerbFurFind$group$pv
projection(Assignment_Prob_group)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_group,
filename = "ap1.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_ind <- Bo4707FurFind$sample$pv$Ind4707
projection(Assignment_Prob_ind)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_group,
filename = "ap2.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Indplot<-
plot(FigureEx_Find, who=1:2,
sources=list(draw=FALSE),
calibs=list(draw=FALSE),
assigns=list(draw=TRUE,col="red",pch = 17,cex = 1))
Assignment_Prob_Fur <- FigureEx_Find$sample$pv$Ind102_Fur #$group$pv
projection(Assignment_Prob_Fur)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_ind,
filename = "Ind102 Fur.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_Wing <- FigureEx_Find$sample$pv$Ind102_Wing #$group$pv
projection(Assignment_Prob_Wing)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_Wing,
filename = "Ind102 Wing.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
Assignment_Prob_ind <- Bo4707FurFind$sample$pv$Ind4707 #$group$pv
projection(Assignment_Prob_ind)
## [1] "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"
writeRaster(
Assignment_Prob_ind,
filename = "ap2.asc",
format = "ascii",
overwrite = TRUE,
NAflag = -9999
)
save.image("//researchstore.uscs.susx.ac.uk/lifesci-ruby/ruby/lab-fm/Personal/Jean-Patrick/Miniopterus/Scratch/Results2/311019.RData")
rm(list=ls())
install.packages("leaflet")
# to install the development version from Github, run
# devtools::install_github("rstudio/leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
setwd("\\researchstore.uscs.susx.ac.uk/lifesci-ruby/ruby/lab-fm/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool")
setwd("//researchstore.uscs.susx.ac.uk/lifesci-ruby/ruby/lab-fm/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool")
crs(r) <- sp::CRS('+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs')#Britsih National Grid)
library(sp)
crs(r) <- sp::CRS('+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs')#Britsih National Grid)
library(sp)
library(raster)
r <- raster("_Hogs__01_allps.tif")
crs(r) <- sp::CRS('+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs')#Britsih National Grid)
pal <- colorNumeric(c("#0C2C84", "#41B6C4"), values(r),
na.color = "transparent")
leaflet() %>% addTiles() %>%
addRasterImage(r, colors = pal, opacity = 0.8) %>%
addLegend(pal = pal, values = values(r),
title = "Surface temp")
library(shiny)
library(leaflet)
install.packages("leaflet")
install.packages("sp")
install.packages("raster")
install.packages("rgdal")
install.packages("mapview")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
#Quick Test
ui <- fluidPage(
title = "Interactive Map",
leafletOutput("mymap", width = "75%", height = "700px")
)
library(shiny)
library(leaflet)
library(sp)
library(raster)
library(rgdal)
library(mapview)
library(magrittr)
#Quick Test
ui <- fluidPage(
title = "Interactive Map",
leafletOutput("mymap", width = "75%", height = "700px")
)
server <- function(input, output) {
output[["mymap"]] <- renderLeaflet({
leaflet() %>%
setView(lng = -2.0434570, lat = 54.681199,
zoom = 6) %>%
addTiles(group = "OSM (default)") #%>%
#addProviderTiles(providers$Esri.WorldImagery, group = "Esri World Imagery")
})
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(sp)
library(raster)
library(rgdal)
library(mapview)
library(magrittr)
#Quick Test
ui <- fluidPage(
title = "Interactive Map",
leafletOutput("mymap", width = "75%", height = "700px")
)
server <- function(input, output) {
output[["mymap"]] <- renderLeaflet({
leaflet() %>%
setView(lng = -2.0434570, lat = 54.681199,
zoom = 6) %>%
addTiles(group = "OSM (default)") #%>%
#addProviderTiles(providers$Esri.WorldImagery, group = "Esri World Imagery")
})
}
shinyApp(ui, server)
library(rsconnect)
rsconnect::setAccountInfo(name='mammalsociety',
token='013C479277D3692A2B3A086AC2D292F0',
secret='D6TNG7T3mSh1x7L9yfiw9DZy4Q7IwM+hKkfodzND')
getwd()
setwd("//researchstore.uscs.susx.ac.uk/lifesci-ruby/ruby/lab-fm/Shared resources/Hedgehog_mortality/Maxent/app")
setwd("//researchstore.uscs.susx.ac.uk/lifesci-ruby/ruby/lab-fm/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool/app")
getwd()
r <- raster("_Hogs__log_allps.tif")
p<-raster("Reclass_bin")
p<-raster("Reclass_bin.aux")
p<-raster("Reclass_bin")
crs(r) <- sp::CRS('+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs')
crs(p) <- sp::CRS('+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +datum=OSGB36 +units=m +no_defs')
papl<-colorNumeric(c( "#FF0000"), values(p),
na.color = "transparent")
#pal <- colorNumeric(c("#FF0000"), values(r),
#  na.color = "transparent")
pal <- colorNumeric(c("#0C2C84","#FFFFCC", "#FF3333" ), values(r), #dark blue, yellow, red
na.color = "transparent")
runApp('Z:/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool/app')
runApp('Z:/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool/app')
runApp('Z:/Shared resources/Hedgehog_mortality/Maxent/Tif Files for online tool/app')
